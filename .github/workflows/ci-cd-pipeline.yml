name: CI/CD Pipeline

on:
  push:
    branches:
      - master

permissions:
  id-token: write # Required for AWS OIDC connection
  contents: read   # Required for actions/checkout
  pull-requests: write # Required for GitHub bot to comment on PRs

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      CLUSTER_NAME: github-actions-cicd-demo-cluster  # Set your cluster name here
      APPLICATION_NAME: simple-html-app
      EC2_INSTANCE_ID: i-017251f9dff0007f9

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Check current directory
        run: |
          pwd
          ls
          tree
      
      - name: Build Docker image
        run: |
          docker build -t anuragiscoding/${{ env.APPLICATION_NAME }}:latest -f ${{ env.APPLICATION_NAME }}/Dockerfile ${{ env.APPLICATION_NAME }}

      - name: Scan Docker image for vulnerabilities with Trivy
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy image --quiet --severity HIGH,CRITICAL anuragiscoding/${{ env.APPLICATION_NAME }}:latest || exit 1

      # SonarQube analysis
      - name: Run SonarQube Scan
        run: |
          echo "Enable this scan after SonarQube server is set up and running"
          # sonar-scanner \
          # -Dsonar.projectKey=your_project_key \
          # -Dsonar.sources=. \
          # -Dsonar.host.url=https://your-sonarqube-server \
          # -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push anuragiscoding/${{ env.APPLICATION_NAME }}:latest

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-AWS

      - name: Testing aws ssm send-command with environment variable
        run: |
          echo "Starting Docker container on EC2 instance"
          aws ssm send-command --document-name "AWS-RunShellScript" --targets "Key=instanceids,Values=${{ env.EC2_INSTANCE_ID }}" --parameters 'commands=["echo Hello World"]'

      - name: Start Docker container on EC2 instance
        run: |
          echo "Starting Docker container on EC2 instance"
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceids,Values=${{ env.EC2_INSTANCE_ID }}" \
            --parameters 'commands=["docker run -d -p 80:80 --rm --name ${{ env.APPLICATION_NAME }} anuragiscoding/${{ env.APPLICATION_NAME }}:latest"]' \
            --comment "Deploying application inside a Docker container"

      - name: Set up Kubernetes CLI
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'
      
    # # Use below code for deploying to EKS
    #   - name: Configure kubectl
    #     run: |
    #       aws eks --region eu-central-1 update-kubeconfig --name ${{ env.CLUSTER_NAME }}

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yml
          kubectl apply -f k8s/service.yml